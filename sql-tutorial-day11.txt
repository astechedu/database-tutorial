# ----> SQL Tutorial ----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers

     
# -- Day 11 --

#11. SQL Constraints

     SQL constraints are used to specify rules for data in a table.

     Constraints can be specified when the table is created with the CREATE TABLE statement, or 
     after the table is created with the ALTER TABLE statement.


 Syntax:
	CREATE TABLE table_name (
	    column1 datatype constraint,
	    column2 datatype constraint,
	    column3 datatype constraint,
	    ....
	);


> The following constraints are commonly used in SQL:

    NOT NULL     - Ensures that a column cannot have a NULL value
    UNIQUE       - Ensures that all values in a column are different
    PRIMARY KEY  - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    FOREIGN KEY  - Prevents actions that would destroy links between tables
    CHECK        - Ensures that the values in a column satisfies a specific condition
    DEFAULT      - Sets a default value for a column if no value is specified
    CREATE INDEX - Used to create and retrieve data from the database very quickly




AND: 
    Keywords: Unsigned, Auto_increment
 
 
   
  ---- L A B ---
   
   
#Create New Table For Testing: 


  CREATE TABLE constraints(
    id int,
    name varchar(20),
    age int
  );
				+-------+-------------+------+-----+---------+-------+
				| Field | Type        | Null | Key | Default | Extra |
				+-------+-------------+------+-----+---------+-------+
				| id    | int(11)     | YES  |     | NULL    |       |
				| name  | varchar(20) | YES  |     | NULL    |       |
				| age   | int(11)     | YES  |     | NULL    |       |
				+-------+-------------+------+-----+---------+-------+

#Insert Data

   1.                                              //Constraint not created in table
   
   INSERT INTO constraints (id, name, age)             
   VALUES(1, "ajay", 22), 
         (2, "sonu", 33),
         (3, "aman", 11),
         (4, "dev",  99),
         (5, "top",  56);         
					+------+------+------+
					| id   | name | age  |
					+------+------+------+
					|    1 | ajay |   22 |
					|    2 | sonu |   33 |
					|    3 | aman |   11 |
					|    4 | dev  |   99 |
					|    5 | top  |   56 |
					+------+------+------+         
         
   2.                                               //Constraint not created in table
             
   INSERT INTO constraints (id, name, age) 
   VALUES(1, "ajay", 22),
         (2, "sonu", 33),
         (3, "aman", 11),
         (1, "dev",   0),
         (2, "top",  56),
         (0, "ram",  56);         
					+------+------+------+
					| id   | name | age  |
					+------+------+------+
					|    1 | ajay |   22 |
					|    2 | sonu |   33 |
					|    3 | aman |   11 |
					|    1 | dev  |    0 |
					|    2 | top  |   56 |
					|    0 | ram  |   56 |
					+------+------+------+

   3.                                              //Constraint not created in table
   
   INSERT INTO constraints (name, age) 
   VALUES("ajay", 22),
         ("sonu", 33),
         ("aman", 11),
         ("dev",   0),
         ("top",  56);  
   
				+------+------+------+
				| id   | name | age  |
				+------+------+------+
				| NULL | ajay |   22 |
				| NULL | sonu |   33 |
				| NULL | aman |   11 |
				| NULL | dev  |    0 |
				| NULL | top  |   56 |
				+------+------+------+
   
   4.                                              //Constraint not created in table
   
   INSERT INTO constraints (id, age) 
   VALUES(2, 22),
         (2, 33),
         (98, 11),
         (3,  0),
         (1, 56);    
				+------+------+------+
				| id   | name | age  |
				+------+------+------+
				|    2 | NULL |   22 |
				|    2 | NULL |   33 |
				|   98 | NULL |   11 |
				|    3 | NULL |    0 |
				|    1 | NULL |   56 |
				+------+------+------+
    
         
SOLUTIONS: 

  1. NOT NULL:                     (Blow: Column id is Not null but not unique: Don't except Null Values, Except Duplicate Values)

	  CREATE TABLE constraints(
	    id int NOT NULL,
	    name varchar(20) NOT NULL,
	    age int NOT NULL
	  );		        +-------+-------------+------+-----+---------+-------+
				| Field | Type        | Null | Key | Default | Extra |
				+-------+-------------+------+-----+---------+-------+
				| id    | int(11)     | NO   |     | NULL    |       |
				| name  | varchar(20) | NO   |     | NULL    |       |
				| age   | int(11)     | NO   |     | NULL    |       |
				+-------+-------------+------+-----+---------+-------+
				
				
   
 2. UNIQUE:                            (Below: Column id is UNIQUE but null: No Duplicate Values, Except NULL Values)
 
	  CREATE TABLE constraints(
	    id int,
	    name varchar(20),
	    age int,
	    UNIQUE(id)
	  ); 		        DESC constraints
				+-------+-------------+------+-----+---------+-------+
				| Field | Type        | Null | Key | Default | Extra |
				+-------+-------------+------+-----+---------+-------+
				| id    | int(11)     | YES  | UNI | NULL    |       |
				| name  | varchar(20) | YES  |     | NULL    |       |
				| age   | int(11)     | YES  |     | NULL    |       |
				+-------+-------------+------+-----+---------+-------+



 2. UNIQUE + NOT NULL:                  (Column is unique and not null: Not except NULL & Duplicate Values)
 
	  CREATE TABLE constraints(
	    id int NOT NULL,
	    name varchar(20),
	    age int,
	    UNIQUE(id)
	  ); 		        DESC constraints
				+-------+-------------+------+-----+---------+-------+
				| Field | Type        | Null | Key | Default | Extra |
				+-------+-------------+------+-----+---------+-------+
				| id    | int(11)     | NO   | PRI | NULL    |       |
				| name  | varchar(20) | YES  |     | NULL    |       |
				| age   | int(11)     | YES  |     | NULL    |       |
				+-------+-------------+------+-----+---------+-------+
	  
	  
   
 3. PRIMARY KEY:                          (Column is Primary: Not except NULL & Duplicate Values)
   
	  CREATE TABLE constraints(
	    id int auto_increment,
	    name varchar(20),
	    age int,
	    PRIMARY KEY (id)
	  );  
	                    
	  INSERT INTO constraints (name,age) VALUES ("ajay",18);
	  
	  			DESC constraints;
				+-------+-------------+------+-----+---------+-------+
				| Field | Type        | Null | Key | Default | Extra |
				+-------+-------------+------+-----+---------+-------+
				| id    | int(11)     | NO   | PRI | NULL    |       |
				| name  | varchar(20) | YES  |     | NULL    |       |
				| age   | int(11)     | YES  |     | NULL    |       |
				+-------+-------------+------+-----+---------+-------+
      
 4. FOREIGN KEY:
   
	  CREATE TABLE info (
	    id int,
	    city varchar(20),
	    country varchar(20),
	    constraints_id int,	
	    PRIMARY KEY (id),    
	    FOREIGN KEY (constraints_id) REFERENCES constraints (id)	    
	  );   
		                DESC info; 
				+----------------+-------------+------+-----+---------+-------+
				| Field          | Type        | Null | Key | Default | Extra |
				+----------------+-------------+------+-----+---------+-------+
				| id             | int(11)     | NO   | PRI | NULL    |       |
				| city           | varchar(20) | YES  |     | NULL    |       |
				| country        | varchar(20) | YES  |     | NULL    |       |
				| constraints_id | int(11)     | YES  | MUL | NULL    |       |
				+----------------+-------------+------+-----+---------+-------+

 5. CHECK:                          
   
	  CREATE TABLE constraints(
	    id int,
	    name varchar(20),
	    age int,	    
	    PRIMARY KEY (id),
	    CHECK (age >= 18)
	  );  
           
          INSERT INTO constraints (id, name,age) VALUES (1,"ajay",18);                
                           
                                DESC constraints;
				+-------+-------------+------+-----+---------+-------+
				| Field | Type        | Null | Key | Default | Extra |
				+-------+-------------+------+-----+---------+-------+
				| id    | int(11)     | NO   | PRI | NULL    |       |
				| name  | varchar(20) | YES  |     | NULL    |       |
				| age   | int(11)     | YES  |     | NULL    |       |
				+-------+-------------+------+-----+---------+-------+


 6. DEFAULT:  
 
 	  CREATE TABLE constraints(
	    id int,
	    name varchar(20),
	    age int,
	    salary int DEFAULT 0,
	    role varchar(10) DEFAULT "user",	    
	    PRIMARY KEY (id)
	  ); 
	    
	  INSERT INTO constraints (id,name,age,salary,role) VALUES (1,"ajay",18,1200,"admin"); 
	  
	                   DESC constraint;
				+--------+-------------+------+-----+---------+-------+
				| Field  | Type        | Null | Key | Default | Extra |
				+--------+-------------+------+-----+---------+-------+
				| id     | int(11)     | NO   | PRI | NULL    |       |
				| name   | varchar(20) | YES  |     | NULL    |       |
				| age    | int(11)     | YES  |     | NULL    |       |
				| salary | int(11)     | YES  |     | 0       |       |
				| role   | varchar(10) | YES  |     | user    |       |
				+--------+-------------+------+-----+---------+-------+   
  
 7. CREATE INDEX:
 
        Creates an index on a table. Duplicate values are allowed:

     Index On Single Column: 
     
	CREATE INDEX index_name
	ON table_name (column1);      
     
     Index On Multi Columns:
     
	CREATE INDEX index_name
	ON table_name (column1, column2, ...); 
	
	ALTER TABLE table_name
	DROP INDEX index_name;  

        DROP INDEX index_name
        ON table_name;  
          
         
   Example:
   
        CREATE INDEX my_index01
	ON constraints (name);  	       	   
				+-------+-------------+------+-----+---------+-------+
				| Field | Type        | Null | Key | Default | Extra |
				+-------+-------------+------+-----+---------+-------+
				| id    | int(11)     | NO   | PRI | NULL    |       |
				| name  | varchar(20) | YES  | MUL | NULL    |       |
				| age   | int(11)     | YES  |     | NULL    |       |
				+-------+-------------+------+-----+---------+-------+
	
				     
 Example: 
    
	SHOW index FROM table_name;
	SHOW INDEX FROM constraints;
	
+-------------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+
| Table       | Non_unique | Key_name   | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Ignored |
+-------------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+
| constraints |          0 | PRIMARY    |            1 | id          | A         |           0 |     NULL | NULL   |      | BTREE      |         |               | NO      |
| constraints |          1 | my_index01 |            1 | name        | A         |           0 |     NULL | NULL   | YES  | BTREE      |         |               | NO      |
+-------------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+
2 rows in set (0.001 sec)

       

 
 
 
> UNSIGNED:                         //For positive numbers in a column

 	  CREATE TABLE constraints(
	    id int unsigned,
	    name varchar(20),
	    age int,
	    PRIMARY KEY (id)
	  ); 

          INSERT INTO constraints (id,name,age) VALUES (1,"ajay",18);  
            
			+-------+------------------+------+-----+---------+-------+
			| Field | Type             | Null | Key | Default | Extra |
			+-------+------------------+------+-----+---------+-------+
			| id    | int(10) unsigned | NO   | PRI | NULL    |       |
			| name  | varchar(20)      | YES  |     | NULL    |       |
			| age   | int(11)          | YES  |     | NULL    |       |
			+-------+------------------+------+-----+---------+-------+



> AUTO_INCREMENT:                      //Auto increment in numbers 
 
 	  CREATE TABLE constraints(
	    id int auto_increment,
	    name varchar(20),
	    age int,
	    PRIMARY KEY (id)
	  );  
	                    
	  INSERT INTO constraints (name,age) VALUES ("ajay",18);
 
			+-------+-------------+------+-----+---------+----------------+
			| Field | Type        | Null | Key | Default | Extra          |
			+-------+-------------+------+-----+---------+----------------+
			| id    | int(11)     | NO   | PRI | NULL    | auto_increment |
			| name  | varchar(20) | YES  |     | NULL    |                |
			| age   | int(11)     | YES  |     | NULL    |                |
			+-------+-------------+------+-----+---------+----------------+

 
 
> UNSINGED AUTO_INCREMENT:                    //Positive numbers and auto increment in numbers
 
 	  CREATE TABLE constraints(
	    id int unsigned auto_increment,
	    name varchar(20),
	    age int,
	    PRIMARY KEY (id)
	  );  
			+-------+------------------+------+-----+---------+----------------+
			| Field | Type             | Null | Key | Default | Extra          |
			+-------+------------------+------+-----+---------+----------------+
			| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
			| name  | varchar(20)      | YES  |     | NULL    |                |
			| age   | int(11)          | YES  |     | NULL    |                |
			+-------+------------------+------+-----+---------+----------------+
	        
  
  
  
  
  

--- READ MORE INFORMATION ( REVISION ) ---
         
1) 

  SQL NOT NULL on CREATE TABLE:

         The following SQL ensures that the "ID", "LastName", and "FirstName" columns will NOT accept 
         NULL values when the "Persons" table is created:

  Example:


	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255) NOT NULL,
	    Age int
	);


  SQL NOT NULL on ALTER TABLE:

	ALTER TABLE Persons
	MODIFY COLUMN Age int NOT NULL; 




2) SQL UNIQUE Constraint:

     The UNIQUE constraint ensures that all values in a column are different.
     
     
     
  SQL UNIQUE Constraint on CREATE TABLE:
  
	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    UNIQUE (ID)
	);     
     
     
SQL UNIQUE Constraint on ALTER TABLE:

	ALTER TABLE Persons
	ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);     
	     
	     
     
DROP a UNIQUE Constraint:

	ALTER TABLE Persons
	DROP INDEX UC_Person;      

3)
   SQL PRIMARY KEY Constraint:
  
     The PRIMARY KEY constraint uniquely identifies each record in a table.
     Primary keys must contain UNIQUE values, and cannot contain NULL values.
     
     
SQL PRIMARY KEY on CREATE TABLE:

	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    PRIMARY KEY (ID)
	);      
	     
SQL PRIMARY KEY on ALTER TABLE:
     
	ALTER TABLE Persons
	ADD PRIMARY KEY (ID);    

DROP a PRIMARY KEY Constraint:

	ALTER TABLE Persons
	DROP PRIMARY KEY; 
4)
  SQL FOREIGN KEY Constraint:

	The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.
	A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.


SQL FOREIGN KEY on CREATE TABLE:

	CREATE TABLE Orders (
	    OrderID int NOT NULL,
	    OrderNumber int NOT NULL,
	    PersonID int,
	    PRIMARY KEY (OrderID),
	    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
	); 

SQL FOREIGN KEY on ALTER TABLE:

	ALTER TABLE Orders
	ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID); 


DROP a FOREIGN KEY Constraint:

	ALTER TABLE Orders
	DROP FOREIGN KEY FK_PersonOrder; 



5)

  SQL CHECK Constraint:       

	The CHECK constraint is used to limit the value range that can be placed in a column.
  
SQL CHECK on CREATE TABLE:

	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    CHECK (Age>=18)
	);   
  
  
SQL CHECK on ALTER TABLE:

	ALTER TABLE Persons
	ADD CHECK (Age>=18);  

DROP a CHECK Constraint:

	ALTER TABLE Persons
	DROP CHECK CHK_PersonAge; 



6)

SQL DEFAULT Constraint:

     The DEFAULT constraint is used to set a default value for a column.

SQL DEFAULT on CREATE TABLE:


	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    City varchar(255) DEFAULT 'Sandnes'
	); 


	The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():
	
	CREATE TABLE Orders (
	    ID int NOT NULL,
	    OrderNumber int NOT NULL,
	    OrderDate date DEFAULT GETDATE()
	); 

SQL DEFAULT on ALTER TABLE:

	ALTER TABLE Persons
	ALTER City SET DEFAULT 'Sandnes'; 



DROP a DEFAULT Constraint:

	ALTER TABLE Persons
	ALTER City DROP DEFAULT; 


7)

SQL CREATE INDEX Statement:

    The CREATE INDEX statement is used to create indexes in tables.


CREATE INDEX Syntax:

        Creates an index on a table. Duplicate values are allowed:

	CREATE INDEX index_name
	ON table_name (column1, column2, ...); 


CREATE INDEX Example:

	CREATE INDEX idx_lastname
	ON Persons (LastName); 


       If you want to create an index on a combination of columns, you can list 
       the column names within the parentheses, separated by commas:


	CREATE INDEX idx_pname
	ON Persons (LastName, FirstName); 


DROP INDEX Statement:

	ALTER TABLE table_name
	DROP INDEX index_name;

        DROP INDEX index_name
        ON table_name;
     
        SHOW index FROM table_name;
     
     
  . Automatically creates the indexes for PRIMARY KEY and UNIQUE columns.
  . Index columns that you frequently use to retrieve the data.    
  . Index columns that are used for joins to improve join performance.    
  . Avoid columns that contain too many NULL values.
  . Small tables do not require indexes.
     
--


AND:

> AUTO INCREMENT Field

	Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
        By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

    Syntax:

	The following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:

	CREATE TABLE Persons (
	    Personid int NOT NULL AUTO_INCREMENT,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    PRIMARY KEY (Personid)
	); 


	To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:
	
	Example:
	
	ALTER TABLE Persons AUTO_INCREMENT=100; 


 ---x---    

