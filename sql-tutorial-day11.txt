# ----> SQL Tutorial ----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers

     
# -- Day 11 --
#11. SQL Constraints

     SQL constraints are used to specify rules for data in a table.

     Constraints can be specified when the table is created with the CREATE TABLE statement, or 
     after the table is created with the ALTER TABLE statement.


Syntax:
	CREATE TABLE table_name (
	    column1 datatype constraint,
	    column2 datatype constraint,
	    column3 datatype constraint,
	    ....
	);



> The following constraints are commonly used in SQL:

    NOT NULL     - Ensures that a column cannot have a NULL value
    UNIQUE       - Ensures that all values in a column are different
    PRIMARY KEY  - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
    FOREIGN KEY  - Prevents actions that would destroy links between tables
    CHECK        - Ensures that the values in a column satisfies a specific condition
    DEFAULT      - Sets a default value for a column if no value is specified
    CREATE INDEX - Used to create and retrieve data from the database very quickly


1) 

SQL NOT NULL on CREATE TABLE

         The following SQL ensures that the "ID", "LastName", and "FirstName" columns will NOT accept 
         NULL values when the "Persons" table is created:

Example:


	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255) NOT NULL,
	    Age int
	);


SQL NOT NULL on ALTER TABLE:

	ALTER TABLE Persons
	MODIFY COLUMN Age int NOT NULL; 




2) SQL UNIQUE Constraint:

     The UNIQUE constraint ensures that all values in a column are different.
     
     
     
  SQL UNIQUE Constraint on CREATE TABLE:
  
	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    UNIQUE (ID)
	);     
     
     
SQL UNIQUE Constraint on ALTER TABLE:

	ALTER TABLE Persons
	ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);     
	     
	     
     
DROP a UNIQUE Constraint:

	ALTER TABLE Persons
	DROP INDEX UC_Person;      
     



3)
   SQL PRIMARY KEY Constraint:
  
     The PRIMARY KEY constraint uniquely identifies each record in a table.
     Primary keys must contain UNIQUE values, and cannot contain NULL values.
     
     
SQL PRIMARY KEY on CREATE TABLE:

	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    PRIMARY KEY (ID)
	);      
	     
SQL PRIMARY KEY on ALTER TABLE:
     
	ALTER TABLE Persons
	ADD PRIMARY KEY (ID);    

DROP a PRIMARY KEY Constraint:

	ALTER TABLE Persons
	DROP PRIMARY KEY; 



4)
  SQL FOREIGN KEY Constraint:

	The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.
	A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.


SQL FOREIGN KEY on CREATE TABLE:

	CREATE TABLE Orders (
	    OrderID int NOT NULL,
	    OrderNumber int NOT NULL,
	    PersonID int,
	    PRIMARY KEY (OrderID),
	    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
	); 

SQL FOREIGN KEY on ALTER TABLE:

	ALTER TABLE Orders
	ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID); 


DROP a FOREIGN KEY Constraint:

	ALTER TABLE Orders
	DROP FOREIGN KEY FK_PersonOrder; 




5)

  SQL CHECK Constraint:       

	The CHECK constraint is used to limit the value range that can be placed in a column.
  
SQL CHECK on CREATE TABLE:

	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    CHECK (Age>=18)
	);   
  
  
SQL CHECK on ALTER TABLE:

	ALTER TABLE Persons
	ADD CHECK (Age>=18);  

DROP a CHECK Constraint:

	ALTER TABLE Persons
	DROP CHECK CHK_PersonAge; 



6)

SQL DEFAULT Constraint:

     The DEFAULT constraint is used to set a default value for a column.

SQL DEFAULT on CREATE TABLE:


	CREATE TABLE Persons (
	    ID int NOT NULL,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    City varchar(255) DEFAULT 'Sandnes'
	); 


	The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():
	
	CREATE TABLE Orders (
	    ID int NOT NULL,
	    OrderNumber int NOT NULL,
	    OrderDate date DEFAULT GETDATE()
	); 

SQL DEFAULT on ALTER TABLE:

	ALTER TABLE Persons
	ALTER City SET DEFAULT 'Sandnes'; 



DROP a DEFAULT Constraint:

	ALTER TABLE Persons
	ALTER City DROP DEFAULT; 


7)

SQL CREATE INDEX Statement:

    The CREATE INDEX statement is used to create indexes in tables.


CREATE INDEX Syntax:

        Creates an index on a table. Duplicate values are allowed:

	CREATE INDEX index_name
	ON table_name (column1, column2, ...); 


CREATE INDEX Example:

	CREATE INDEX idx_lastname
	ON Persons (LastName); 


       If you want to create an index on a combination of columns, you can list 
       the column names within the parentheses, separated by commas:


	CREATE INDEX idx_pname
	ON Persons (LastName, FirstName); 


DROP INDEX Statement:

	ALTER TABLE table_name
	DROP INDEX index_name;


--


AND:

> AUTO INCREMENT Field

	Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
        By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

    Syntax:

	The following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:

	CREATE TABLE Persons (
	    Personid int NOT NULL AUTO_INCREMENT,
	    LastName varchar(255) NOT NULL,
	    FirstName varchar(255),
	    Age int,
	    PRIMARY KEY (Personid)
	); 


	To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:
	
	Example:
	
	ALTER TABLE Persons AUTO_INCREMENT=100; 


 ---x---    

