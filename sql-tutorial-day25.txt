# ----> SQL Tutorial ----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers



						     ---> Day 25 <----

#25 SQL Stored Procedures

                
                      ->A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.

                      ->A stored procedure in SQL is a group of SQL statements that are stored together in a database.

		      ->In SQL, a stored procedure is a set of statement(s) that perform some defined actions. 
			We make stored procedures so that we can reuse statements that are used frequently.



      >> Creating a Procedure:    ' CREATE PROCEDURE '



MySQL:


DELIMITER //

CREATE PROCEDURE proc_name ()

BEGIN
  SELECT column1, column2...
  FROM TableName
  WHERE condition;
END //

DELIMITER ;




DELIMITER //
CREATE PROCEDURE pro_name(param1 INT)
BEGIN
SELECT * FROM student_database.student s where s.sname = pram1;
END//
DELIMITER;




>Executing Stored Procedure: 

	.SQL Server, Oracle

		EXEC us_customers;

	.PostgreSQL, MySQL:

		CALL us_customers();


>Drop Procedure

	.SQL Server, PostgreSQL, MySQL

		DROP PROCEDURE us_customers;



Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT *FROM products;
END $$
DELIMITER ;

CALL pp;




Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT p.name, p.price FROM products p;
END $$
DELIMITER ;

CALL pp;




Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT p.name, p.price FROM products p where price > 2000;
END $$
DELIMITER ;

CALL pp;



Example:

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT p.name, p.price FROM products p where price BETWEEN 2000 AND 5000;
END $$
DELIMITER ;

CALL pp;



--> IF(column, true, false) <---


Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT p.name, p.price , IF( price < 600, 'no discount', 'discounted') AS Discounted_Status FROM products p;
END $$
DELIMITER ;

CALL pp;

---x---




---> CASE <---

Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT p.name, p.price , 
CASE WHEN price > 200 THEN price*0.10 
     ELSE 0 
END Discounted_Status 
FROM products p;
END $$
DELIMITER ;

CALL pp;



Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT p.name, p.price, 
  CASE WHEN p.price > 100 AND p.price < 250 THEN p.price*0.10
       WHEN p.price > 250 AND p.price < 700 THEN p.price*0.20
       ELSE 0
  END AS Discounted_Status
  FROM products p;
END $$
DELIMITER ;

CALL pp;



---x---


Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp2()
BEGIN
  SELECT p.name, p.price , IF( price < 600, price*0.10, 'no discount') AS Discounted_Status FROM products p;
END $$
DELIMITER ;

CALL pp2;



Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT *FROM products p INNER JOIN orders o ON p.id = o.product_id ;
END $$
DELIMITER ;

CALL pp;





Example:

DROP PROCEDURE IF EXISTS pp;

DELIMITER $$
CREATE PROCEDURE pp()
BEGIN
  SELECT p.name, p.price , o.order_id FROM products p INNER JOIN orders o ON p.id = o.product_id ;
END $$
DELIMITER ;

CALL pp;





--> Parameters <--

Example: 

DROP PROCEDURE IF EXISTS pp;


DELIMITER //
CREATE PROCEDURE gp(p INT)
BEGIN
SELECT * FROM products WHERE price = p;
END//
DELIMITER;

CALL gp(600);




Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER //
CREATE PROCEDURE gp(pname VARCHAR(10))
BEGIN
SELECT * FROM products WHERE NAME = pname;
END//
DELIMITER;

CALL gp("laptop");



Example: 

DROP PROCEDURE IF EXISTS pp;

DELIMITER //
CREATE PROCEDURE gp(pname VARCHAR(10))
BEGIN
SELECT name FROM products WHERE NAME = pname;
END//
DELIMITER;

CALL gp("laptop");







----x----









SQL Server:

CREATE PROCEDURE us_customers AS
SELECT customer_id, first_name
FROM Customers
WHERE Country = 'USA';

PostgreSQL

CREATE PROCEDURE us_customers ()
LANGUAGE SQL
AS $$
SELECT customer_id, first_name
FROM Customers
WHERE Country = 'USA';
$$;


MySQL:

DROP PROCEDURE IF EXISTS pp;

DELIMITER //
CREATE PROCEDURE us_customers ()
BEGIN
SELECT customer_id, first_name
FROM Customers
WHERE Country = 'USA';
END //
DELIMITER ;


Oracle:

CREATE PROCEDURE us_customers
AS res SYS_REFCURSOR;  
BEGIN
open res for
SELECT customer_id, first_name
FROM Customers
WHERE country = 'USA';
DBMS_SQL.RETURN_RESULT(res);
END



----x----






--More Case--



SELECT player_name,
       year,
       CASE WHEN year = 'SR' THEN 'yes'
            ELSE 'no' END AS is_a_senior
  FROM benn.college_football_players



DROP PROCEDURE IF EXISTS pp;

SELECT player_name,
       weight,
       CASE WHEN weight > 250 THEN 'over 250'
            WHEN weight > 200 THEN '201-250'
            WHEN weight > 175 THEN '176-200'
            ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players




SELECT player_name,
       weight,
       CASE WHEN weight > 250 THEN 'over 250'
            WHEN weight > 200 AND weight <= 250 THEN '201-250'
            WHEN weight > 175 AND weight <= 200 THEN '176-200'
            ELSE '175 or under' END AS weight_group
  FROM benn.college_football_players




SELECT player_name,
       CASE WHEN year = 'FR' AND position = 'WR' THEN 'frosh_wr'
            ELSE NULL END AS sample_case_statement
  FROM benn.college_football_players



SELECT CASE WHEN year = 'FR' THEN 'FR'
            ELSE 'Not FR' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY CASE WHEN year = 'FR' THEN 'FR'
               ELSE 'Not FR' END





SELECT COUNT(1) AS fr_count
  FROM benn.college_football_players
 WHERE year = 'FR'



SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY 1


SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY year_group




SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY CASE WHEN year = 'FR' THEN 'FR'
               WHEN year = 'SO' THEN 'SO'
               WHEN year = 'JR' THEN 'JR'
               WHEN year = 'SR' THEN 'SR'
               ELSE 'No Year Data' END





SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            *
  FROM benn.college_football_players




SELECT CASE WHEN year = 'FR' THEN 'FR'
            WHEN year = 'SO' THEN 'SO'
            WHEN year = 'JR' THEN 'JR'
            WHEN year = 'SR' THEN 'SR'
            ELSE 'No Year Data' END AS year_group,
            COUNT(1) AS count
  FROM benn.college_football_players
 GROUP BY 1





SELECT COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count
  FROM benn.college_football_players































----x---