# ----> SQL Tutorial ----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers



-- Day 25 ---

#25 MySQL Stored Function

		->A stored function in MySQL is a set of SQL statements that perform some task/operation and return a single value.



Some Points: 

    .The stored function can return only a single value defined in the function header.
    .The stored function may also be called within SQL statements.
    .It may not produce a result set.

    .The function parameter may contain only the IN parameter but can't allow specifying this parameter, while the procedure can allow      IN, OUT, INOUT parameters.


      Stored functions: 

			Stored functions are just like built in functions except that you have to define the stored function yourself. 			Once a stored function has been created, it can be used in SQL statements just like any other function. 
			The basic syntax for creating a stored function is as shown below


HERE

     CREATE FUNCTION sf_name ([parameter(s)]):
                          is mandatory and tells MySQL server to create a function named `sf_name’ with optional 
                          parameters defined in the parenthesis.

     RETURNS data type:
                       is mandatory and specifies the data type that the function should return.

     DETERMINISTIC: 
                   means the function will return the same values if the same arguments are supplied to it.

     STATEMENTS:  
                 is the procedural code that the function executes.



Syntax: 

CREATE FUNCTION sf_name ([parameter(s)])
   RETURNS data type
   DETERMINISTIC
   STATEMENTS




MYSQL: 

DELIMITER $$  
   
CREATE FUNCTION fun_name(fun_parameter(s))  
RETURNS datatype  
[NOT] {Characteristics}  
fun_body; 



Example: 


    DELIMITER $$  
    CREATE FUNCTION Customer_Occupation(  
        age int  
    )   
    RETURNS VARCHAR(30)  
    DETERMINISTIC  
    BEGIN  
        DECLARE customer_occupation VARCHAR(25);  
        IF age > 56 THEN  
            SET customer_occupation = 'Scientist';  
        ELSEIF (age <= 36 AND   
                age >= 31) THEN  
            SET customer_occupation = 'Engineer';  
        ELSEIF age < 31 THEN  
            SET customer_occupation = 'Actor';  
        END IF;  
        -- return the customer occupation  
        RETURN (customer_occupation);  
    END$$  
    DELIMITER;  




> Stored Function Call

    SELECT name, age, Customer_Occupation(age)        //Look at above example
    FROM customer ORDER BY age;  




> Stored Function Call in Procedure                   //Look at above example


DELIMITER $$  
CREATE PROCEDURE GetCustomerDetail()  
BEGIN  
    SELECT name, age, Customer_Occupation(age) FROM customer ORDER BY age;  
END$$  
DELIMITER ;



> Call the stored Function :                    
        SELECT stored_function_name();




> Call the stored procedure:

	CALL GetCustomerDetail();  




----x----
-------------------------------------------------------------



2. User-Defined Function
   i> Scalar Functions           ii> Table Valued Functions  
      (Return Single Value)          (Return a table as a result)
                                        1. Inlined Table Valued Function 
                                        2. Multi Statement Table Valued Function)


i> Scalar Functions Examples:

DELIMITER $$
-- Scalar example:
CREATE FUNCTION NoParameters()
  RETURNS INT
  
    BEGIN 
       RETURN (SELECT SUM(id) FROM users);
    END$$
    
DELIMITER ;

//Calling this function
SELECT NoParameters();

---x---

>> Function ON Ubuntu

DELIMITER $$
create function fn1(id int) returns int
begin
 return id;
end $$
DELIMITER ;


select id,name, fn1(id) from users;

//Or

DELIMITER $$
create function fn1() returns int
begin
 return 100;
end $$
DELIMITER ;


select id,name, fn1() from users;

//Or

DELIMITER $$
create function fn1() returns int
begin
 declare id int;
 set id = 13;
 return id;
end $$
DELIMITER ;



//Or

DELIMITER $$
create function fn1() returns int
begin
 declare n1 int;
 declare n2 int;
 set n1 = 10;
 set n2 = 5;
 return n1+n2;
end $$
DELIMITER ;


>>While Loop in function

DELIMITER $$
create function fn1() returns int
begin
 declare counter int;
 set counter = 0;
 label:
  while counter < 10 do
    set counter = counter + 1;
  end  
  while label;
  return counter;
 end $$
DELIMITER ;




---x---
--------------------------------------------------------------


Syntax: 

CREATE FUNCTION schema_name.function_name (parameter_list)  
RETURNS data_type AS  
BEGIN  
    statements  
    RETURN value  
END 

---x---

//Calculate the net sales 

DELIMITER $$

    CREATE FUNCTION udfNet_Sales(  
        @quantity INT,  
        @price DEC(10,2),  
        @discount DEC(3,2)  
    )  
    RETURNS DEC(10,2)  
    AS   
    BEGIN  
        RETURN @quantity * @price * (1 - @discount);  
    END $$   

DELIMITER ;

//Use this function in select query:

SELECT dbo.udfNet_Sales(25, 500, 0.2) AS net_sales; 

---x---

--------------------------------------------------------

ii>> Table-Valued Functions

1. Inline Table-Values Functions

Example 01: 

    --It creates a table-valued function to get employees  
    CREATE FUNCTION fudf_GetEmployee()  
    RETURNS TABLE  
    AS  
     RETURN (SELECT * FROM Employee)  



//
SELECT * FROM udf_GetEmployee(); 
 
---x---

-------------------------------------------------------------------



>>> Function in phpmyadmin (Working)

DELIMITER $$
CREATE FUNCTION calcProfit(cost FLOAT, price FLOAT) RETURNS DECIMAL(9,2)
BEGIN
  DECLARE profit DECIMAL(9,2);
  SET profit = price-cost;
  RETURN profit;
END$$
DELIMITER ;

---------------------------------------------------------------------------
//

>>> Function in phpmyadmin (Working)

DELIMITER $$
CREATE FUNCTION totalprice(quantity INT, price INT) RETURNS DECIMAL(9,2)
BEGIN
  DECLARE total DECIMAL(9,2);
  SET total = quantity*price;
  RETURN total;
END $$
DELIMITER ;



----x---
-------------------------------------------------------------







--Notes--




Types of functions
Built-in functions


    Strings functions – operate on string data types
    Numeric functions – operate on numeric data types
    Date functions – operate on date data types
    Aggregate functions – operate on all of the above data types and produce summarized result sets.
    Other functions – MySQL also supports other types of built in functions but we will limit our lesson to the above named functions only.




-------------------------------------------------
Example: 


DELIMITER |
CREATE FUNCTION sf_past_movie_return_date (return_date DATE)
  RETURNS VARCHAR(3)
   DETERMINISTIC
    BEGIN
     DECLARE sf_value VARCHAR(3);
        IF curdate() > return_date
            THEN SET sf_value = 'Yes';
        ELSEIF  curdate() <= return_date
            THEN SET sf_value = 'No';
        END IF;
     RETURN sf_value;
    END|



Executing: 

SELECT `movie_id`,`membership_number`,`return_date`,CURDATE() ,sf_past_movie_return_date(`return_date`)  
FROM `movierentals`;









