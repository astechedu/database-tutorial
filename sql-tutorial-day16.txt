# ----> SQL Tutorial ----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers



--- Day 16 ---

#16. SQL Queries For Beginners : Practice 




#1. Write a query to create a table.

    CREATE TABLE testing (
    
      id int auto_increment,
      name varchar(20),
      primary key(id)
      
    );




#2. Write a query, how to drop a table?

    	DROP TABLE testing;
    	
    	

#3. Write a query to remove records meeting a certain condition from a table

	DELETE FROM testing
	WHERE id  = 10;
	
	

#4. Write a query to update a column in a table.

	UPDATE testing
	SET fname = 'ajay';
	
	

     
#6. Write a query to retrieve data from all columns

    	SELECT *FROM testing;




#7. Write a query to retrieve data from certain columns

    	SELECT id, name 
    	FROM testing;




#8.  Write a query to filter data using where clause

    	SELECT id, name, age 
    	FROM testing 
    	WHERE age >= 17;



		
#9. Write a query to filter data using conditions joined by AND operator

    	SELECT id, name, age 
    	FROM testing 
    	WHERE aga >= 17 AND name = 'amit';
	
	
	
		
#10. Write a query to filter data using conditions joined by OR operator

    	SELECT id, name, age 
    	FROM testing 
    	WHERE aga >= 17 OR name = 'amit';
    	
    	
			
#11. Write a query to eliminate duplicate records from the result.

    	SELECT DINSTICT name, age
    	FROM testing;
	
	
	
	
#12. Write a query to retrieve data without NULL in a certain column

    	SELECT DINSTICT name, age
    	FROM testing
    	WHERE age IS NOT NULL;
		
		
		
		
#13. Write a query to sort data according to more than one column.

    	SELECT DINSTICT name, age
    	FROM testing
    	ORDER BY name;
	
	
	
	
#14. Write a query to delete all data from a table.
  
        TRUNCATE table testing;
   
	
	
	
#15. Write a query to search for values matching a certain pattern.

    	SELECT id, name
    	FROM testing
    	WHERE name LIKE '%d%';
	
	
	
			
#16. Write a query to join values from text colums into one string.

    	SELECT CONCAT(category, ' ', name)
    	FROM tab;
	
	
	
	
#17. Write a query for adding data from different table.	
	
	SELECT last_name FROM customer
	UNION ALL
	SELECT last_name FROM employees;	
			
			
			
			
#18. Write a query to find the intersection of sets of data.

	SELECT last_name FROM customer
	INTERSECT
	SELECT last_name FROM employees;			
			
			
			
			
#19. Write a query to count number of row.

         SELECT COUNT(id)
         FROM testing;




#20. Write a query to calculate average of the values in a column

         SELECT AVG(price)
         FROM testing;
         
         
         

#21. Write a query to calculate the sum of the values in a column

         SELECT SUM(price)
         FROM testing;

	
	
	
#22. Write a query to retrieve the first three characters of emp last name from the employees table.

	SELECT SUBSTR(last_name, 1, 3) 
	FROM empoyees;




#23. Write a query to create a new table which consists of data and structure copied from the other table.

         CREATE TABLE test AS 
         SELECT *FROM emp;





#24. Write a query to get the current date.

	SELECT SYSDATE();
	




#25. Write a query to crete a new table which only the structure copied from the other table.

         CREATE TABLE test AS 
         SELECT *FROM testing WHERE 1=0;





#26. Write a query to fetch first 5 records.

	SELECT *FROM emp LIMIT 5;




#27. Write a query to retrieve the emp first name and emp last name in a single column as "fullname". The first name and last name must be saperated with space.


        SELECT CONCAT(fname,' ',lname) AS "FullName" FROM test;
	
	

#28. Write a query to fetch details of employees whose emp last name ends with an alphabet 'S' and contains four alphabets


	SELECT *FROM employees 
	WHERE emp_lname LIKE '____S';
	




#29. Write a query to fetch details of all employees excluding the employees with first names, "SMITH" and "BLAKE" form 

	SELECT *FROM employees 
	WHERE first_name NOT IN ("SMITH","BLAKE");
	



----x----



























-- Group Queries:






#30. Write a query to fetch the department-wise count of employees sorted by department's count in ascending order.

	SELECT COUNT(empno) AS c, job 
	FROM emp 
	GROUP BY job 
	ORDER BY c asc;
	
	
	
	

#31. Write a query to retrieve duplicate records from a table.


	SELECT *, COUNT(empno) 
	FROM emp 
	GROUP BY empno 
	HAVING COUNT(EMPNO) > 1;



----x----    




>> ON GROUP: 

Write a query to calculate the aggregate value for groups of records.

          SELECT category, COUNT(id)
          FROM testing
          GROUP BY category;
       
       
          
Write a query to filter rows using aggregate functions.

          SELECT category, AVG(price)
          FROM testing
          GROUP BY category
          HAVING AVG(price) < 58.40;
          
                    
          
          
          
          





