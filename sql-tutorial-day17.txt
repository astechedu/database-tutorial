# ----> SQL Tutorial ----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers



-- Day 17 ---

#16 Subquery: Subquery Or Nested Queries Or Inner query
    
       Single Subquery, 
       Multiple Subquery, 
       Corelated Subquery

                                               OUTER -> (inner Query) <- QUERY

SQL Subquery:


	A subquery, or nested query, is a query placed within another SQL query. When requesting information from a database, you may find it necessary to include a subquery into the SELECT, FROM , JOIN, or WHERE clause. However, you can also use subqueries when updating the database (i.e. in INSERT, UPDATE, and DELETE statements).

	In SQL a Subquery can be simply defined as a query within another query. In other words we can say that a Subquery is a query that is embedded in WHERE clause of another SQL query. 


	You can place the Subquery in a number of SQL clauses: WHERE clause, HAVING clause, FROM clause. Subqueries can be used with SELECT, UPDATE, INSERT, DELETE statements along with expression operator. It could be equality operator or comparison operator such as =, >, =, <= and Like operator.


      A subquery is a query within another query. The outer query is called as main query and inner query is called as subquery.
      Subqueries are on the right side of the comparison operator.      
      ORDER BY command cannot be used in a Subquery. GROUP BY command can be used to perform same function as ORDER BY command.




There are several types of SQL subqueries:
-----------------------------------------

    .Scalar subqueries return a single value, or exactly one row and exactly one column.
    
    
    .Multi row subqueries return either:
        One column with multiple rows (i.e. a list of values), or
        Multiple columns with multiple rows (i.e. tables).
        
        
    .Correlated subqueries, where the inner query relies on information obtained from the outer query.






> Single Line Subquery: 

            select *from emp where deptno = (select deptno from dept where dname="sales";
            select *from products where price =  (select avg(price) from products);
            


	    Ex: Scalar Subquery


		SELECT name, listed_price
		FROM paintings
		WHERE listed_price > (
		    SELECT AVG(listed_price)
		    FROM paintings
		);


            
            
> Multiline Subquery  : 

            select *from emp where deptno IN (select deptno from dept where dname="sales" or dname="research");
            select *from emps where emp_id IN (select emp_id from departments);
	    select *from emps where emp_id IN (select emp_id from departments)  order by emp_city;
	    select *from emp where deptno IN (select deptno from dept where dname="sales" or dname="research") order by deptno desc;
            select *from emp where dept_id IN (select dept_id from dept);
           
           
            Ex:  
                SELECT first_name, last_name
		FROM collectors
		WHERE id IN (
		    SELECT collector_id
		    FROM sales
		);



	     Ex: Mult-irow Subquery with Multiple Columns:

		ELECT
		  artists.first_name,
		  artists.last_name,
		  artist_sales.sales
		FROM artists
		
		JOIN (
		    SELECT artist_id, SUM(sales_price) AS sales
		    FROM sales
		    GROUP BY artist_id
		  ) AS artist_sales
		  
		  ON artists.id = artist_sales.artist_id;




         
> Correlated Subquery  :             

	    select ename,sal from emp e where sal > (select sal from emp n where e.mgr = n.empno);   	    
	    select e.* from emps e where  exists (select d.emp_id from departments d where d.emp_id=e.emp_id);
	    select e.* from emps e where  exists (select d.emp_id from departments d where d.emp_id=e.emp_id);
	    select e.* from emps e where  exists (select d.emp_id from departments d where d.emp_id=e.emp_id d.dept_id > 3);
	    select *from emp where EXISTS (select id from dept whose emp.e_id = dept.e_id);
    
 
	    select p.name,p.price from products p where p.id in (select o.pid from orders o where p.id = o.pid);

						+------+-------+
						| name | price |
						+------+-------+
						| tv   |   388 |
						| comb |    89 |
						+------+-------+








Subquery Syntax: 
---------------

	SELECT column_name
	FROM table_name
	WHERE column_name expression operator 
	    ( 
	        SELECT COLUMN_NAME  from TABLE_NAME   WHERE ... 
	    );
	    
	    

      Ex: 

          To display NAME, LOCATION, PHONE_NUMBER of the students from DATABASE table whose section is B
          
          
		Select NAME, LOCATION, PHONE_NUMBER from DATABASE 		
		WHERE ROLL_NO IN		
		(
			SELECT ROLL_NO from STUDENT where SECTION='B'
		);       
			  


      Ex:       
      
          To delete students from Student2 table whose rollno is same as that in Student1 table and having location as punjab


		DELETE FROM Student2 
		WHERE ROLL_NO IN ( SELECT ROLL_NO 
				   FROM Student1 
				   WHERE LOCATION = 'punjab);
				   
				   
       
      Ex: 
       
         To update name of the students to ajay in Student2 table whose location is same as geeta,dev in Student1 table            
                   
                   
		UPDATE Student2 
		SET NAME= 'ajay' 
		WHERE LOCATION IN ( SELECT LOCATION 
				    FROM Student1 
				    WHERE NAME IN ('geeta','dev'));                 
                   
      
      
      
      
 # Correlated Subquery Syntax: 
 -----------------------------
 
	 SELECT colum1, column2, ...
	 FROM table outer
	 WHERE column1 OPERATOR 
		          (SELECT column1, columm2 
		          FROM table2 
		          WHERE expr1 = outer.expr2);
	 
		
	      
    Ex: 

	SELECT lname, salary, dept_id
	FROM employee outer
	WHERE salary > 
		      (SELECT AVG(salary)
		      FROM employee
		      WHERE dept_id = 
		            outer.dept_id GROUP BY dept_id);
		      
    
       
    Ex: 
	select p.name,p.price from products p where p.id in (select o.pid from orders o where p.id = o.pid);

						+------+-------+
						| name | price |
						+------+-------+
						| tv   |   388 |
						| comb |    89 |
						+------+-------+


----x----



