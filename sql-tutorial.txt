# ----> SQL Tutorial ----

#https://github.com/astechedu/database-tutorial.git
#SQL Basics For Beginers

# -- Day 1 --
#1. 

Introduction:
-------------

Sql is a standrd language forstoring, manipulatin and retrieving data in database

What is SQL?
-----------
  
   Sql stands for Structued Query Language
   Sql lets you access and manipulate databases


   Sql can retrieve data from database
   Sql can execute queries against a database
   Sql can insert records in a database
   Sql can update records in database
   Sql can create new database
   Sql can create tables
   Sql can delete records from database
   Sql can create stored procedures in database
   Sql can create views in databas
   Sql can set permissions on tables, procedures, and views


Using Sql in Web Site:
---------------------

    An RDBMS database program ( MySql, SQL Server, Oracle, MS Access etc.)
    To use a server-side scripting language like php, asp etc.


    RDBMS stands for Relational Database Mamagement System

    RDBMS is the basis for SQL
    And for all modern database systems such as MS SQL Server, Oracle, Mysql and Microsoft access etc.
  
    The data in RDBMS is stored in database Objects called tables.
    A table is a collection of related data entries and it consists of columns and rows.




Some Most Important sql commands: 
--------------------------------
    
    CREATE DATABASE - creates a new database
    CREATE TABLE    - creates a new table
    INSERT INTO     - inserts new data into a database
    SELECT          - extracts data from a database
    UPDATE          - updates data in a database
    ALTER DATABASE  - modifies a database
    DROP TABLE      - deletes a table
    CREATE INDEX    - creates an index (search key)
    DELETE          - delete data from a database
    DROP INDEX      - deletes an idex
    ALTER TABLE     - modifies a table



Table: 
      ---------------------------------------
      |  id  |  fname  |  lname    |  age    |
      ---------------------------------------  
      |  1   |  ajay   | sisaudiya |  88     |
      ---------------------------------------                   
      |  2   |  amit   | aryan     |  33     |
      ---------------------------------------
      |  3   |  geeta  | rawat     |  83     |
      ---------------------------------------
      |  4   | akshita | sengar    |  9      |
      ---------------------------------------
      |  5   |  aura   | negi      |   61    |
      ---------------------------------------
      |  6   |  dev    | pratap    |  20     |
      ---------------------------------------
      
    Syntax: 
      
        CREATE DATABASE <db-name>      


    Examples: 
    --------

    select *from users;


    Lab: 

    #Creating database
    create database sql_tutorial;
   
    #Creating table 
    create table users{

     id int,
     fname varchar(20),
     lname varchar(20),
     age int
     
    };  

    #Inserting data
    insert into users(id,fname,lname,age) values(1,"ajay","sisaudiya",23); 

----x-----

# -- Day 2 --

#2. Copy Old_table to New_table


Syntax:

      create table new_table_name select *from old_table_name;
      //OR
      create table new_table_name AS select *from old_table_name;
      
      
 > copy table from existing table into new table with data

   Syntax:
	 create table new_table_name select *from old_table_name;
	
   Example: 
         create table users2 select *from users;
        

 > copy table's structure form old table to new table

   Syntax:
         create table new_table_name select *from old_table_name where 1=0;

   Example: 
	 create table users2 select *from users where 1=0;


 > copy table with some columns from existing table to new table with data

    Syntax:    
	create table new_table_name select id, fname from old_table_name;
	
    Example:
	create table users2 select id, fname from users;

 > copy table's structure form old table to new table without data
 
     Syntax: 
        create table new_table_name select id, fname from old_table_name where 1=0;
        
     Example:
	create table users2 select id, fname from users where 1=0;


---x---


# -- Day 3 --

#3. SQL Alter Table Statement, Datatypes

      The alter table statement is used to add, delete, or modify columns in an existing table.
      or drop,  rename column, 

  1. Add Column

     alter table users
     add column_name datatype;

     Example: 
     
     alter table users
     add email varchar(225);

   2. Drop Column

     alter table users
     drop column column_name;

     Example: 
  
     alter table users
     drop column email;

   3. Rename Column

     alter table table_name
     rename column old_name to new_name;

     Example:
  
     alter table users
     rename column lname to fname;

   4. Modify Datatype

     alter table uses
     modify column_name datatype;

     Example: 
 
     alter table users
     modify salary float;
    

---x---

# -- Day 4 --

#4. SQL WHERE Clause with Operators

    The WHERE clause is used to filter records.
    
   Syntax:
   
    SELECT * FROM table_name
    WHERE Column = value;   
   
   Examples:

 > SQL Arithmetic Operators:

      Example:           
	
      select 8 + 2
      select 9 - 4
      select 3 * 2
      select 8 / 2
      select 8 % 3
	  
	  
-SQL Comparison Operators:

   a)   
    SELECT * FROM users
    WHERE Country='India';     
    
   b)  
    SELECT * FROM Products
    WHERE Price = 18; 
     
   c)    
    SELECT * FROM Products
    WHERE Price > 30;
    
   d)   
   SELECT * FROM Products
   WHERE Price < 30;
    
   e)   
   SELECT * FROM Products
   WHERE Price >= 30;
    
   f)   
   SELECT * FROM Products
   WHERE Price <= 30; 
        
   g)   
   SELECT * FROM Products
   WHERE Price <> 18;
    
-Logical Operator Examples:
 
   a)
   SELECT ProductName 
   FROM Products
   WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

   b)
   SELECT * FROM Customers
   WHERE City = "London" AND Country = "UK";
   
   c)
   SELECT * FROM Products
   WHERE Price > ANY (SELECT Price FROM Products WHERE Price > 50);
   
   d)
   SELECT * FROM Products
   WHERE Price BETWEEN 50 AND 60;
   
   e)
   SELECT SupplierName
   FROM Suppliers
   WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);  
    
   f)
   SELECT * FROM Customers
   WHERE City IN ('Paris','London');  
   
   g)
   SELECT * FROM Customers
   WHERE City LIKE 's%';

   h)
   SELECT * FROM Customers
   WHERE City NOT LIKE 's%';

   i)
   SELECT * FROM Customers
   WHERE City = "London" OR Country = "UK";

   j)
   SELECT * FROM Products
   WHERE Price > SOME (SELECT Price FROM Products WHERE Price > 20); 
 
 
 
 > The following operators can be used in the WHERE clause:
 
       
 > SQL Arithmetic Operators:

	Operator	Description	       Example:            Result:
	
	+	        Add	               select 8 + 2        10
	-		Subtract	       select 9 - 4        5 
	*		Multiply	       select 3 * 2        6
	/		Divide	               select 8 / 2        4
	%		Modulo                 select 8 % 3        2  (Remaider)
	        
 > SQL Bitwise Operators:

	Operator	Description
	
	&		Bitwise AND
	|		Bitwise OR
	^		Bitwise exclusive OR
		
 > SQL Comparison Operators:

	Operator	Description
		
	=		Equal to	
	>		Greater than	
	<		Less than	
	>=		Greater than or equal to	
	<=		Less than or equal to	
	<>		Not equal to
	
 > SQL Compound Operators:

	Operator	Description
	
	+=		Add equals
	-=		Subtract equals
	*=		Multiply equals
	/=		Divide equals
	%=		Modulo equals
	&=		Bitwise AND equals
	^-=		Bitwise exclusive equals
	|*=		Bitwise OR equals	
	
 > SQL Logical Operators:

	Operator	Description
		
	ALL		TRUE if all of the subquery values meet the condition
	AND		TRUE if all the conditions separated by AND is TRUE	
	ANY		TRUE if any of the subquery values meet the condition	
	BETWEEN	        TRUE if the operand is within the range of comparisons
	EXI
        STS		TRUE if the subquery returns one or more records	
	IN		TRUE if the operand is equal to one of a list of expressions	
	LIKE		TRUE if the operand matches a pattern
	NOT		Displays a record if the condition(s) is NOT TRUE	
	OR		TRUE if any of the conditions separated by OR is TRUE	
	SOME		TRUE if any of the subquery values meet the condition
	
		
---x---


# -- Day 5 --

#5. Update statement is used to modify the existing records in a table
               -- Update, Set & Where Clause --   

   SQL Update Statement: 

   Syntax: 

    UPDATE table_name
    SET column_Name = value;


    UPDATE table_name
    SET column_name = value
    WHERE condition;


    UPDATE table_name
    SET column_name1 = value1, column_name2 = value2, column_name3 = value3;
    WHERE condition;

Examples: 

 1.      update users
         set fname ="anuj";

 2.
	 update users
	 set name = "amit"
	 where id = 4;

 3.
	 update users
	 set fname = "rohit", lname = "gupta"
	 where id = 6;

 4.      update employees
         set emp_salary = 2000
         where emp_id = 8;

 5.      update products
         set product_price = 12000
         where product_id = 8 AND product_quantity = 1;

 6.      update products
         set product_price = 8000
         where product_id = 1 OR product_id = 4

 7.      update products
         set product_color = "xl"
         where product_price between 500 AND 300

 8.      update users
         set status = 0;
         where city like 'in%';

 9       update users
         set status = 1
         where country NOT LIKE 'in%';

10       update users
         set status = 0
         where salary > 3000;

11       update users
         set status = 1
         where salary < 4000;

12       update users
         set comment = "valuable user"
         where id >= 30;

13       update users
         set comment = "average user"
         where id <= 10;

14       update users
         set status = 1
         where id IN (1,4,6);

14       update employees
         set bonus = salary * 0.2 
         where status = 1;

15       update employees
         set tot_salary = salary + bonus
         where status = 1;



------x------

 # -- Day 6 --
 
 #6. SQL Aggregate Functions 


     COUNT        counts how many rows are in a particular column.
     SUM          adds together all the values in a particular column.
     MIN, MAX     return the lowest and highest values in a particular column, respectively.
     AVG          calculates the average of a group of selected values.


     1. SQL COUNT():
     
         The COUNT() function returns the number of rows that matches a specified criterion.
     
     Syntax:
	
	SELECT COUNT(column_name)
	FROM table_name
	WHERE condition;      

	SELECT COUNT(emp_id)
	FROM employees; 
	
	SELECT COUNT(emp_id) NoOfUsers
	FROM employees; 
				  
	SELECT COUNT(emp_id)
	FROM employees	  
	WHERE emp_salary > 4000;
		  
	SELECT COUNT(emp_id)
	FROM employees	  
	WHERE emp_salary < 3000;
	
	SELECT COUNT(emp_id)
	FROM employees	  
	WHERE emp_salary >= 3000;	
	
	SELECT COUNT(emp_id)
	FROM employees	  
	WHERE emp_salary <= 3000;	
	  
	SELECT COUNT(emp_id)
	FROM employees	  
	WHERE emp_country LIKE 'a%';
		  
	SELECT COUNT(emp_id)
	FROM employees	  
	WHERE emp_country NOT LIKE 'a%';

		  
        The following SQL statement finds the number of products:
        
	SELECT COUNT(ProductID)
	FROM Products; 
	
	SELECT COUNT(ProductID)
	FROM Products	  
	WHERE unit_price > 4;
		
		
	Note: NULL values are not counted.  
	  
	  
     2. SQL AVG():
     
  	The AVG() function returns the average value of a numeric column. 	
  	  
     Syntax: 
     
     	SELECT AVG(column_name)
	FROM table_name
	WHERE condition; 
 
      	SELECT AVG(emp_salary)
	FROM users
	where emp_salary > 4000;
 
       	SELECT AVG(emp_salary)
	FROM users
	where emp_salary >= 2000;
	
      	SELECT AVG(emp_salary)
	FROM users
	where emp_city LIKE 'h%';
	
		
        The following SQL statement finds the average price of all products:
 
	SELECT AVG(Price)
	FROM Products;
	
        Note: NULL values are ignored.
        

      3. SQL SUM():
      
  	The SUM() function returns the total sum of a numeric column. 	
  	  
     Syntax: 
   
	SELECT SUM(column_name)
	FROM table_name
	WHERE condition; 
 
       	SELECT SUM(emp_salary)
	FROM users
	
       	SELECT SUM(emp_salary)
	FROM users	
	where emp_salary <= 1000;
	
       	SELECT SUM(emp_salary)
	FROM users
        where emp_city LIKE 'h%';
	
 	The following SQL statement finds the sum of the "Quantity" fields in the "OrderDetails" table:
 	
	SELECT SUM(Quantity)
	FROM OrderDetails; 

	Note: NULL values are ignored.
	
	
	
      3. SQL MAX():
      
  	The MAX() returns the highest value (maximum) in a set of non-NULL values.
  	  
     Syntax: 
   
	SELECT Max(column_name)
	FROM table_name
	WHERE condition; 	
	
	SELECT Max(emp_salary)
	FROM employees	
	
	SELECT Max(emp_salary)
	FROM employees	
	WHERE emp_salary > 4000;
	
	SELECT Max(emp_salary)
	FROM employees	
	WHERE emp_salary >= 5000;
	
	SELECT Max(emp_salary)
	FROM employees	
	WHERE emp_City LIKE 'h%';
		
	
      3. SQL MIN():
      
  	The MIN() aggregate function returns the lowest value (minimum) in a set of non-NULL values.
  	  
     Syntax: 
   
	SELECT MIN(column_name)
	FROM table_name
	WHERE condition; 	
	
	SELECT MIN(emp_salary)
	FROM employees	
	
	SELECT MIN(emp_salary)
	FROM employees	
	WHERE emp_salary > 4000;
	
	SELECT MIN(emp_salary)
	FROM employees	
	WHERE emp_salary >= 5000;
				
	SELECT MIN(emp_salary)
	FROM employees	
	WHERE emp_city LIKE 'h%';			

				
 ----x----
 
 
# -- Day 7 --

#7. SQL ORDER BY Keyword

    The ORDER BY keyword is used to sort the result-set in ascending or descending order.    
    
    
   Syntax:

	SELECT column1, column2, ...
	FROM table_name
	ORDER BY column1, column2, ... ASC|DESC;    	    
    
    Example:
    
	SELECT * FROM employees;
	ORDER BY emp_fname asc;  
		
	SELECT emp_id, emp_fname FROM employees;
	ORDER BY emp_fname desc; 
	
	SELECT emp_id, emp_fname, emp_city FROM employees;
	ORDER BY emp_city desc; 	 	
	
	SELECT emp_fname, emp_salary, emp_city FROM employees;
	ORDER BY emp_salary asc; 		

	SELECT emp_fname, emp_salary, emp_address, emp_age FROM employees;
	ORDER BY emp_fname desc; 
			
	SELECT * FROM Products
	ORDER BY Price;  
	
	SELECT * FROM Products
	ORDER BY Price;  	        	
	
  	SELECT * FROM employees;
	WHERE emp_id > 5 ORDER BY emp_fname asc;      
	
  	SELECT emp_id, emp_fname, emp_salary FROM employees;
	WHERE emp_id BETWEEN 3 AND 8 ORDER BY emp_fname asc;
	
  	SELECT emp_fname, emp_salary FROM employees;
	WHERE emp_id > 6 ORDER BY emp_salary asc;
	
  	SELECT emp_fname, emp_salary FROM employees;
	WHERE emp_salary > 23000 ORDER BY emp_fname asc;
		
  	SELECT emp_fname, emp_salary FROM employees;
	WHERE emp_salary > 23000 ORDER BY emp_fname desc;	
	
  	SELECT emp_fname, emp_salary FROM employees;
	WHERE emp_country LIKE 'i%' ORDER BY emp_fname asc;	
			  	
        	  
 ---x---   
 
