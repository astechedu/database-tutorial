# ----> SQL Tutorial <----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers



					------>  Day 28  <------


#28 CTE ( Comman Table Expression )                              -- Looping

Introduction to Common Table Expression (CTE) in MySQL?: 


	A Common Table Expression (CTE) is a temporary named result set that is defined within the scope of a single SQL query.
	CTE is a temporary named result set that you can reference within a select, insert, update, or delete.




MySQL CTE Recursive 

-------> Recursive CTE <-------



Syntax:


WITH RECURSIVE cte_name AS (

CTE_query_definition               -- non recursive term

UNION ALL

recursive_query_definition         -- recursive term

)
SELECT * FROM cte_name


'O R '


WITH RECURSIVE cte_count (n) AS (
      SELECT 1                     -- Anchor member
      UNION ALL
      SELECT n + 1                 -- Recursive member
      FROM cte_count               -- Recursive member
      WHERE n < 3                  -- Termination condition
    )
SELECT n                           -- Query that uses CTE
FROM cte_count;                    -- Query that uses CTE




Example 01: 
  
With recursive numbers as                  
(
  select 1 as n                              
  union 
  select n from numbers where n < 10      
)
select *from numbers;

			+------+
			| n    |
			+------+
			|    1 |
			+------+




Example 02:       			-- Loop
                          

With recursive numbers as                  
(
  select 1 as n                              
  union 
  select n+1 from numbers where n < 10      
)
select *from numbers;

				+------+
				| n    |
				+------+
				|    1 |
				|    2 |
				|    3 |
				|    4 |
				|    5 |
				|    6 |
				|    7 |
				|    8 |
				|    9 |
				|   10 |
				+------+



Example 03:       			     -- Loop
    
                                             -- Like: for(i=0;i<5;i++)

With recursive mytable (i) as                -- i
(
  select 0                                   -- i=0
  union all
  select i+1 from mytable where i < 5        -- i+1 = 0 + 1 = 1
)
select *from mytable;
				+------+
				| i    |
				+------+
				|    0 |
				|    1 |
				|    2 |
				|    3 |
				|    4 |
				|    5 |
				+------+


Example 04:


WITH RECURSIVE cte_count 
AS 
(
SELECT 1 AS n
UNION ALL 
SELECT n+1 FROM cte_count WHERE n < 3
)  
SELECT n FROM cte_count;


				+------+
				| n    |
				+------+
				|    1 |
				|    2 |
				|    3 |
				+------+


'OR'


WITH RECURSIVE cte_count (n) 
AS (
      SELECT 1
      UNION ALL
      SELECT n + 1 
      FROM cte_count 
      WHERE n < 3
    )
SELECT n 
FROM cte_count;





Example 05:

SET @num:=129;                      -- Set variable in mysql


-- Find length of given string


SET @name:="Ajay Sisaudiay";        -- Set variable in mysql

WITH RECURSIVE CTE AS (

SELECT 1 AS cnt
UNION ALL 
SELECT cnt+1 FROM CTE
WHERE cnt < LENGTH(@name)
)
SELECT *FROM CTE;

			+------+
			| cnt  |
			+------+
			|    1 |
			|    2 |
			|    3 |
			|    4 |
			|    5 |
			|    6 |
			|    7 |
			|    8 |
			|    9 |
			|   10 |
			|   11 |
			|   12 |
			|   13 |
			|   14 |
			+------+



Example 06:

-- Pringin Alphabet from string given 

SET @name:="Ajay Sisaudiay";    	     -- Set variable in mysql


WITH RECURSIVE CTE 
AS 
(
  SELECT 1 AS cnt
  UNION ALL 
  SELECT cnt+1 FROM CTE
  WHERE cnt < LENGTH(@name)
)
SELECT SUBSTRING(@name, cnt, 1) FROM CTE;

			+--------------------------+
			| SUBSTRING(@name, cnt, 1) |
			+--------------------------+
			| A                        |
			| j                        |
			| a                        |
			| y                        |
			|                          |
			| S                        |
			| i                        |
			| s                        |
			| a                        |
			| u                        |
			| d                        |
			| i                        |
			| a                        |
			| y                        |
			+--------------------------+





Example 07:



WITH RECURSIVE my_CTE AS (           -- Base query/
SELECT 1 AS n                        -- anchor member

UNION ALL

SELECT n+1 FROM my_CTE             -- Recursive query/
WHERE n < 3 )                      -- recursive member

SELECT * FROM my_CTE;

				+------+
				| n    |
				+------+
				|    1 |
				|    2 |
				|    3 |
				+------+


Example 08: 



 If a parenthesized list of names follows the CTE name, those names are the column names:
 

WITH cte (col1, col2) AS
(
  SELECT 1, 2
  UNION ALL
  SELECT 3, 4
)
SELECT col1, col2 FROM cte;

			+------+------+
			| col1 | col2 |
			+------+------+
			|    1 |    2 |
			|    3 |    4 |
			+------+------+



Example 09: 

 Otherwise, the column names come from the select list of the first SELECT within the AS (subquery) part:
 

WITH cte AS
(
  SELECT 1 AS col1, 2 AS col2
  UNION ALL
  SELECT 3, 4
)
SELECT col1, col2 FROM cte;

			+------+------+
			| col1 | col2 |
			+------+------+
			|    1 |    2 |
			|    3 |    4 |
			+------+------+



Example 10: 


Recursive Common Table Expressions:

	A recursive common table expression is one having a subquery that refers to its own name. For example:



WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte WHERE n < 5
)
SELECT * FROM cte;

When executed, the statement produces this result, a single column containing a simple linear sequence:

	+------+
	| n    |
	+------+
	|    1 |
	|    2 |
	|    3 |
	|    4 |
	|    5 |
	+------+



Example 11: 


WITH RECURSIVE cte AS
(
  SELECT 1 AS n, 'abc' AS str
  UNION ALL
  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3
)
SELECT * FROM cte;

In nonstrict SQL mode, the statement produces this output:

	+------+------+
	| n    | str  |
	+------+------+
	|    1 | abc  |
	|    2 | abc  |
	|    3 | abc  |
	+------+------+




Example 12: 


 To address this issue, so that the statement does not produce truncation or errors, use CAST() in the nonrecursive SELECT to make the str column wider:


WITH RECURSIVE cte AS
(
  SELECT 1 AS n, CAST('abc' AS CHAR(20)) AS str
  UNION ALL
  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3
)
SELECT * FROM cte;

Now the statement produces this result, without truncation:

		+------+--------------+
		| n    | str          |
		+------+--------------+
		|    1 | abc          |
		|    2 | abcabc       |
		|    3 | abcabcabcabc |
		+------+--------------+





Example 13: 


WITH RECURSIVE cte AS
(
  SELECT 1 AS n, 1 AS p, -1 AS q
  UNION ALL
  SELECT n + 1, q * 2, p * 2 FROM cte WHERE n < 5
)
SELECT * FROM cte;


		+------+------+------+
		| n    | p    | q    |
		+------+------+------+
		|    1 |    1 |   -1 |
		|    2 |   -2 |    2 |
		|    3 |    4 |   -4 |
		|    4 |   -8 |    8 |
		|    5 |   16 |  -16 |
		+------+------+------+




-----x------









Create Table: 






1. 

CREATE TABLE sales (
    product_name VARCHAR(50),
    sales_date DATE,
    revenue DECIMAL(10, 2)
);



INSERT INTO sales (product_name, sales_date, revenue) VALUES 
    ('Product A', '2023-03-01', 1000), 
    ('Product A', '2023-03-15', 1500), 
    ('Product A', '2023-03-30', 2000), 
    ('Product B', '2023-03-01', 800), 
    ('Product B', '2023-03-15', 1200), 
    ('Product B', '2023-03-30', 1600),
    ('Product C', '2023-03-01', 500),
    ('Product C', '2023-03-15', 750),
    ('Product C', '2023-03-30', 1000);



2. 


CREATE TABLE sales (
  order_date DATE,
  product VARCHAR(50),
  quantity INT,
  revenue DECIMAL(10,2)
);

INSERT INTO sales (order_date, product, quantity, revenue) VALUES 
('2023-01-01', 'Product A', 10, 1000.00),
('2023-01-15', 'Product B', 5, 500.00),
('2023-02-01', 'Product A', 8, 800.00),
('2023-02-15', 'Product C', 3, 300.00),
('2023-03-01', 'Product A', 12, 1200.00),
('2023-03-15', 'Product B', 7, 700.00);





2. 

CREATE TABLE employees (

emp_id serial PRIMARY KEY,
emp_name VARCHAR NOT NULL,
manager_id INT );



INSERT INTO employees (

emp_id, emp_name, manager_id)

VALUES

(1, 'Madhav', NULL),
(2, 'Sam', 1),
(3, 'Tom', 2),
(4, 'Arjun', 6),
(5, 'Shiva', 4),
(6, 'Keshav', 1),
(7, 'Damodar', 5);



3. 


CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    manager_id INT
);


INSERT INTO employees VALUES
    (1, 'Ajay Doe', NULL),         -- CEO, no manager
    (2, 'Neha Smith', 1),          -- Manager, reports to CEO
    (3, 'Dev Johnson', 2),         -- Employee, reports to Jane Smith
    (4, 'Geeta Brown', 2),         -- Employee, reports to Jane Smith
    (5, 'Aryan Davis', 3);         -- Employee, reports to Bob Johnson





3. Recursive CTE Example:


CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    manager_id INT
);


INSERT INTO employees VALUES
    (1, 'Ajay Doe', NULL),         -- CEO, no manager
    (2, 'Neha Smith', 1),          -- Manager, reports to CEO
    (3, 'Dev Johnson', 2),         -- Employee, reports to Jane Smith
    (4, 'Geeta Brown', 2),         -- Employee, reports to Jane Smith
    (5, 'Aryan Davis', 3);         -- Employee, reports to Bob Johnson







----x---


