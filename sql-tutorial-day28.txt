# ----> SQL Tutorial <----

# https://github.com/astechedu/database-tutorial.git

# SQL Basics For Beginers



					------>  Day 28  <------


#28 CTE ( Comman Table Expression )

Introduction to Common Table Expression (CTE) in MySQL?: 


	A Common Table Expression (CTE) is a temporary named result set that is defined within the scope of a single SQL query.
	CTE is a temporary named result set that you can reference within a select, insert, update, or delete.


        A Common Table Expression, also called as CTE in short form, is a temporary named result set that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement. The CTE can also be used in a View. 


		1. Easily write and maintain complex queries
		2. Increase readability and simplification 



	*Benefits of Using CTE:

		Simplify complex queries
		Improve query performance
		Reuse code
		Traverse hierarchical data
		Simplify debugging




MySQL CTE Syntax:



Syntax: 


WITH cte_name AS (
    SELECT column1, column2, ...
    FROM table_name
    WHERE condition
)
SELECT *
FROM cte_name;



-------> Recursive CTE <-------


//Syntax

WITH RECURSIVE cte_name AS (

CTE_query_definition            -- non recursive term

UNION ALL

recursive_query_definition      -- recursive term

)
SELECT * FROM cte_name


'O R '


WITH RECURSIVE cte_count (n) AS (
      SELECT 1                     -- Anchor member
      UNION ALL
      SELECT n + 1                 -- Recursive member
      FROM cte_count               -- Recursive member
      WHERE n < 3                  -- Termination condition
    )
SELECT n                           -- Query that uses CTE
FROM cte_count;                    -- Query that uses CTE




Example: 

SQL : Loop

Example: 
  
CTE Recursive               // Loop                         

With recursive numbers as                  
(
  select 1 as n                              
  union 
  select n from numbers where n < 10      
)
select *from numbers;



Example:       //Loop

CTE Recursive                                

With recursive numbers as                  
(
  select 1 as n                              
  union 
  select n+1 from numbers where n < 10      
)
select *from numbers;



//Loop

CTE Recursive                                //Like: for(i=0;i<5;i++)

With recursive mytable (i) as                // i
(
  select 0                                   // i=0
  union all
  select i+1 from mytable where i < 5        // i+1 = 0 + 1 = 1
)
select *from mytable;




Example:


WITH RECURSIVE cte_count 
AS 
(
SELECT 1 AS n
UNION ALL 
SELECT n+1 FROM cte_count WHERE n < 3
)  
SELECT n FROM cte_count;


'OR'


WITH RECURSIVE cte_count (n) 
AS (
      SELECT 1
      UNION ALL
      SELECT n + 1 
      FROM cte_count 
      WHERE n < 3
    )
SELECT n 
FROM cte_count;


---x---






MySQL Recursive CTE Syntax: 



WITH RECURSIVE cte_name AS (
    SELECT id, parent_id, name
    FROM table_name
    WHERE parent_id IS NULL
    UNION ALL
    SELECT child.id, child.parent_id, child.name
    FROM table_name child
    JOIN cte_name parent ON child.parent_id = parent.id
)
SELECT *
FROM cte_name;





>>MySQL Recursive CTE Example: 



WITH RECURSIVE employee_hierarchy AS (
    SELECT employee_id, manager_id, name, 0 AS level
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.manager_id, e.name, eh.level + 1
    FROM employees e
    JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id
)
SELECT
    CONCAT(REPEAT('  ', level), name) AS employee_name,
    CONCAT(REPEAT('  ', level - 1), eh.name) AS manager_name
FROM employee_hierarchy eh;






-----> Working <-------

Use a recursive common table expression to display two levels of recursion

          The following example shows managers and the employees reporting to them. 
          The number of levels returned is limited to two.


-- Create an Employee table.
CREATE TABLE MyEmployees
(
EmployeeID SMALLINT NOT NULL,
FirstName NVARCHAR(30) NOT NULL,
LastName NVARCHAR(40) NOT NULL,
Title NVARCHAR(50) NOT NULL,
DeptID SMALLINT NOT NULL,
ManagerID SMALLINT NULL,
CONSTRAINT PK_EmployeeID PRIMARY KEY CLUSTERED (EmployeeID ASC),
CONSTRAINT FK_MyEmployees_ManagerID_EmployeeID FOREIGN KEY (ManagerID) REFERENCES MyEmployees (EmployeeID)
);

-- Populate the table with values.

INSERT INTO MyEmployees VALUES
(1, 'Ajay', 'Sisaudiya', 'Chief Executive Officer',16, NULL)
,(3, 'Geeta', 'Rawat', 'Vice President of Sales', 3, 1)
,(4, 'Dev', 'Kumar', 'North American Sales Manager', 3, 3)
,(5, 'Aura', 'Khan', 'Sales Representative', 3, 4)
,(6, 'Aryan', 'Negi', 'Sales Representative', 3, 4)
,(7, 'Akshita', 'Sengar', 'Pacific Sales Manager', 3, 3)
,(8, 'Bhau', 'Pratap', 'Sales Representative', 3, 7)
,(16, 'Shailja', 'Singh', 'Marketing Manager', 4, 3)
,(23, 'Santosh', 'Rani', 'Marketing Specialist', 4, 16);
,(24, 'Ramesh', 'Pratap', 'Marketing Specialist', 5, 23);


WITH RECURSIVE DirectReports(ManagerID, EmployeeID, Title, EmployeeLevel) AS
(
    SELECT ManagerID, EmployeeID, Title, 0 AS EmployeeLevel
    FROM MyEmployees
    WHERE ManagerID IS NULL
    UNION ALL
    SELECT e.ManagerID, e.EmployeeID, e.Title, EmployeeLevel + 1
    FROM MyEmployees AS e
        INNER JOIN DirectReports AS d
        ON e.ManagerID = d.EmployeeID
)
SELECT ManagerID, EmployeeID, Title, EmployeeLevel
FROM DirectReports
WHERE EmployeeLevel <= 3 ;


ManagerID  EmployeeID  Title                         EmployeeLevel  
---------  ----------  ----------------------------  ---------------
   (NULL)           1  Chief Executive Officer                     0
        1         273  Vice President of Sales                     1
      273          16  Marketing Manager                           2
      273         274  North American Sales Manager                2
      273         285  Pacific Sales Manager                       2
       16          23  Marketing Specialist                        3
      274         275  Sales Representative                        3
      274         276  Sales Representative                        3
      285         286  Sales Representative                        3
--------------------------------------------------------------------


----x-----





------ Recursive CTE --------



Recursive CTE

//Syntax

WITH RECURSIVE cte_name AS (

CTE_query_definition -- non recursive term
UNION ALL
recursive_query_definition -- recursive term

)
SELECT * FROM cte_name

SQL By Rishabh Mishra 3
Base query/
anchor member

Recursive query/
recursive member





RECURSIVE cte:

Example: 


Recursive CTE

WITH RECURSIVE my_CTE AS (           Base query/
SELECT 1 AS n                        anchor member

UNION ALL

SELECT n+1 FROM my_CTE             Recursive query/
WHERE n < 3 )                      recursive member

SELECT * FROM my_CTE





Example: 

WITH RECURSIVE EmpCTE AS (
-- Anchor query
Select emp_id, emp_name, manager_id
From employees
Where emp_id = 7

UNION ALL

-- Recursive query
Select employees.emp_id , employees.emp_name, employees.manager_id
From employees
JOIN EmpCTE
ON employees.emp_id = EmpCTE.manager_id
)
Select * From EmpCTE





Example: 


with recursive emp_hierarchy as 
     (select id, name, manager_id, designation, 1 as lvl
      from emp_details where name="Asha"
      union
      select E.id, E.name, E.manager_id, E.destination, H.lvl+1 as lvl
      from emp_heirarchy H
      join emp_details E on H.id = E.manager_id


----------------------------------------------------------------------
----------------------------------------------------------------------


3. Recursive CTE Example:


CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    manager_id INT
);


INSERT INTO employees VALUES
    (1, 'Ajay Doe', NULL),         -- CEO, no manager
    (2, 'Neha Smith', 1),          -- Manager, reports to CEO
    (3, 'Dev Johnson', 2),         -- Employee, reports to Jane Smith
    (4, 'Geeta Brown', 2),         -- Employee, reports to Jane Smith
    (5, 'Aryan Davis', 3);         -- Employee, reports to Bob Johnson




*)Traverse the hierarchical data in the employees table using a recursive CTE:


WITH RECURSIVE EmployeeHierarchy AS (
    SELECT
        employee_id,
        employee_name,
        manager_id,
        0 AS level
    FROM
        employees
    WHERE
        manager_id IS NULL        -- Anchor member (root of the hierarchy)
        
    UNION ALL
    
    SELECT
        e.employee_id,
        e.employee_name,
        e.manager_id,
        eh.level + 1
    FROM
        employees e
    INNER JOIN
        EmployeeHierarchy eh ON e.manager_id = eh.employee_id     -- Recursive member
)
-- Final query to select from the CTE
SELECT
    employee_id,
    employee_name,
    manager_id,
    level
FROM
    EmployeeHierarchy
ORDER BY
    level, employee_id;



Output:

+-------------+---------------+------------+-------+
| employee_id | employee_name | manager_id | level |
+-------------+---------------+------------+-------+
|           1 | Ajay Doe      |       NULL |     0 |
|           2 | Neha Smith    |          1 |     1 |
|           3 | Dev Johnson   |          2 |     2 |
|           4 | Geeta Brown   |          2 |     2 |
|           5 | aryan Davis   |          3 |     3 |
+-------------+---------------+------------+-------+



How it works.

    Define The CTE with the name EmployeeHierarchy.
    Define an anchor member that selects employees who do not have a manager (manager_id IS NULL), starting with the root of the hierarchy (CEO).

    Use a recursive member to join the employees table with the CTE on the condition that the manager_id in the employees table matches the employee_id in the CTE, effectively traversing the hierarchy.

    Select information from the CTE, including the employee’s ID, name, manager’s ID, and the level in the hierarchy in the final query. And sort the result set by level and employee ID.

----------------------------------------------------------------------
----------------------------------------------------------------------


----------------------------------------------------------------------

1. 

CREATE TABLE sales (
    product_name VARCHAR(50),
    sales_date DATE,
    revenue DECIMAL(10, 2)
);



INSERT INTO sales (product_name, sales_date, revenue) VALUES 
    ('Product A', '2023-03-01', 1000), 
    ('Product A', '2023-03-15', 1500), 
    ('Product A', '2023-03-30', 2000), 
    ('Product B', '2023-03-01', 800), 
    ('Product B', '2023-03-15', 1200), 
    ('Product B', '2023-03-30', 1600),
    ('Product C', '2023-03-01', 500),
    ('Product C', '2023-03-15', 750),
    ('Product C', '2023-03-30', 1000);



2. 


CREATE TABLE sales (
  order_date DATE,
  product VARCHAR(50),
  quantity INT,
  revenue DECIMAL(10,2)
);

INSERT INTO sales (order_date, product, quantity, revenue) VALUES 
('2023-01-01', 'Product A', 10, 1000.00),
('2023-01-15', 'Product B', 5, 500.00),
('2023-02-01', 'Product A', 8, 800.00),
('2023-02-15', 'Product C', 3, 300.00),
('2023-03-01', 'Product A', 12, 1200.00),
('2023-03-15', 'Product B', 7, 700.00);





2. 

CREATE TABLE employees (

emp_id serial PRIMARY KEY,
emp_name VARCHAR NOT NULL,
manager_id INT );



INSERT INTO employees (

emp_id, emp_name, manager_id)

VALUES

(1, 'Madhav', NULL),
(2, 'Sam', 1),
(3, 'Tom', 2),
(4, 'Arjun', 6),
(5, 'Shiva', 4),
(6, 'Keshav', 1),
(7, 'Damodar', 5);



3. 


CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    manager_id INT
);


INSERT INTO employees VALUES
    (1, 'Ajay Doe', NULL),         -- CEO, no manager
    (2, 'Neha Smith', 1),          -- Manager, reports to CEO
    (3, 'Dev Johnson', 2),         -- Employee, reports to Jane Smith
    (4, 'Geeta Brown', 2),         -- Employee, reports to Jane Smith
    (5, 'Aryan Davis', 3);         -- Employee, reports to Bob Johnson





----x---




----x----



---- More Examples -----

CTE Recursive


 A CTE can refer to itself or to other CTEs:

    A self-referencing CTE is recursive.

    A CTE can refer to CTEs defined earlier in the same WITH clause, but not those defined later.

    This constraint rules out mutually-recursive CTEs, where cte1 references cte2 and cte2 references cte1. One of those references must be to a CTE defined later, which is not permitted.

    A CTE in a given query block can refer to CTEs defined in query blocks at a more outer level, but not CTEs defined in query blocks at a more inner level. 






Common Table Expressions

WITH
  cte1 AS (SELECT a, b FROM table1),
  cte2 AS (SELECT c, d FROM table2)
SELECT b, d FROM cte1 JOIN cte2
WHERE cte1.a = cte2.c;


1.

 If a parenthesized list of names follows the CTE name, those names are the column names:

WITH cte (col1, col2) AS
(
  SELECT 1, 2
  UNION ALL
  SELECT 3, 4
)
SELECT col1, col2 FROM cte;



2. 

 Otherwise, the column names come from the select list of the first SELECT within the AS (subquery) part:

WITH cte AS
(
  SELECT 1 AS col1, 2 AS col2
  UNION ALL
  SELECT 3, 4
)
SELECT col1, col2 FROM cte




 At the beginning of SELECT, UPDATE, and DELETE statements.

WITH ... SELECT ...
WITH ... UPDATE ...
WITH ... DELETE ...

At the beginning of subqueries (including derived table subqueries):

SELECT ... WHERE id IN (WITH ... SELECT ...) ...
SELECT * FROM (WITH ... SELECT ...) AS dt ...

Immediately preceding SELECT for statements that include a SELECT statement:

INSERT ... WITH ... SELECT ...
REPLACE ... WITH ... SELECT ...
CREATE TABLE ... WITH ... SELECT ...
CREATE VIEW ... WITH ... SELECT ...
DECLARE CURSOR ... WITH ... SELECT ...
EXPLAIN ... WITH ... SELECT ...




 Only one WITH clause is permitted at the same level. WITH followed by WITH at the same level is not permitted, so this is illegal:

WITH cte1 AS (...) WITH cte2 AS (...) SELECT ...

To make the statement legal, use a single WITH clause that separates the subclauses by a comma:

WITH cte1 AS (...), cte2 AS (...) SELECT ...

However, a statement can contain multiple WITH clauses if they occur at different levels:

WITH cte1 AS (SELECT 1)
SELECT * FROM (WITH cte2 AS (SELECT 2) SELECT * FROM cte2 JOIN cte1) AS dt;

A WITH clause can define one or more common table expressions, but each CTE name must be unique to the clause. This is illegal:

WITH cte1 AS (...), cte1 AS (...) SELECT ...

To make the statement legal, define the CTEs with unique names:

WITH cte1 AS (...), cte2 AS (...) SELECT ...





Recursive Common Table Expressions

A recursive common table expression is one having a subquery that refers to its own name. For example:

WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte WHERE n < 5
)
SELECT * FROM cte;

When executed, the statement produces this result, a single column containing a simple linear sequence:

+------+
| n    |
+------+
|    1 |
|    2 |
|    3 |
|    4 |
|    5 |
+------+





WITH RECURSIVE cte AS
(
  SELECT 1 AS n, 'abc' AS str
  UNION ALL
  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3
)
SELECT * FROM cte;

In nonstrict SQL mode, the statement produces this output:

+------+------+
| n    | str  |
+------+------+
|    1 | abc  |
|    2 | abc  |
|    3 | abc  |
+------+------+




 To address this issue, so that the statement does not produce truncation or errors, use CAST() in the nonrecursive SELECT to make the str column wider:

WITH RECURSIVE cte AS
(
  SELECT 1 AS n, CAST('abc' AS CHAR(20)) AS str
  UNION ALL
  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3
)
SELECT * FROM cte;

Now the statement produces this result, without truncation:

+------+--------------+
| n    | str          |
+------+--------------+
|    1 | abc          |
|    2 | abcabc       |
|    3 | abcabcabcabc |
+------+--------------+






WITH RECURSIVE cte AS
(
  SELECT 1 AS n, 1 AS p, -1 AS q
  UNION ALL
  SELECT n + 1, q * 2, p * 2 FROM cte WHERE n < 5
)
SELECT * FROM cte;



+------+------+------+
| n    | p    | q    |
+------+------+------+
|    1 |    1 |   -1 |
|    2 |   -2 |    2 |
|    3 |    4 |   -4 |
|    4 |   -8 |    8 |
|    5 |   16 |  -16 |
+------+------+------+




Limiting Common Table Expression Recursion




WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte
)
SELECT * FROM cte;




SET SESSION cte_max_recursion_depth = 10;      -- permit only shallow recursion
SET SESSION cte_max_recursion_depth = 1000000; -- permit deeper recursion


SET max_execution_time = 1000; -- impose one second timeout




WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte
)
SELECT /*+ SET_VAR(cte_max_recursion_depth = 1M) */ * FROM cte;

WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte
)
SELECT /*+ MAX_EXECUTION_TIME(1000) */ * FROM cte;




WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte LIMIT 10000
)
SELECT * FROM cte;




WITH RECURSIVE cte (n) AS
(
  SELECT 1
  UNION ALL
  SELECT n + 1 FROM cte LIMIT 10000
)
SELECT /*+ MAX_EXECUTION_TIME(1000) */ * FROM cte;



Recursive Common Table Expression Examples: 


Fibonacci Series Generation: 



WITH RECURSIVE fibonacci (n, fib_n, next_fib_n) AS
(
  SELECT 1, 0, 1
  UNION ALL
  SELECT n + 1, next_fib_n, fib_n + next_fib_n
    FROM fibonacci WHERE n < 10
)
SELECT * FROM fibonacci;



 The CTE produces this result:

+------+-------+------------+
| n    | fib_n | next_fib_n |
+------+-------+------------+
|    1 |     0 |          1 |
|    2 |     1 |          1 |
|    3 |     1 |          2 |
|    4 |     2 |          3 |
|    5 |     3 |          5 |
|    6 |     5 |          8 |
|    7 |     8 |         13 |
|    8 |    13 |         21 |
|    9 |    21 |         34 |
|   10 |    34 |         55 |
+------+-------+------------+



mysql> WITH RECURSIVE fibonacci ...
       ...
       SELECT fib_n FROM fibonacci WHERE n = 8;
+-------+
| fib_n |
+-------+
|    13 |
+-------+



Date Series Generation:


mysql> SELECT * FROM sales ORDER BY date, price;
+------------+--------+
| date       | price  |
+------------+--------+
| 2017-01-03 | 100.00 |
| 2017-01-03 | 200.00 |
| 2017-01-06 |  50.00 |
| 2017-01-08 |  10.00 |
| 2017-01-08 |  20.00 |
| 2017-01-08 | 150.00 |
| 2017-01-10 |   5.00 |
+------------+--------+



 This query summarizes the sales per day:

mysql> SELECT date, SUM(price) AS sum_price
       FROM sales
       GROUP BY date
       ORDER BY date;
+------------+-----------+
| date       | sum_price |
+------------+-----------+
| 2017-01-03 |    300.00 |
| 2017-01-06 |     50.00 |
| 2017-01-08 |    180.00 |
| 2017-01-10 |      5.00 |
+------------+-----------+




 Here is the CTE to generate the date range series:

WITH RECURSIVE dates (date) AS
(
  SELECT MIN(date) FROM sales
  UNION ALL
  SELECT date + INTERVAL 1 DAY FROM dates
  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)
)
SELECT * FROM dates;

The CTE produces this result:

+------------+
| date       |
+------------+
| 2017-01-03 |
| 2017-01-04 |
| 2017-01-05 |
| 2017-01-06 |
| 2017-01-07 |
| 2017-01-08 |
| 2017-01-09 |
| 2017-01-10 |
+------------+



 Joining the CTE with a LEFT JOIN against the sales table produces the sales summary with a row for each date in the range:

WITH RECURSIVE dates (date) AS
(
  SELECT MIN(date) FROM sales
  UNION ALL
  SELECT date + INTERVAL 1 DAY FROM dates
  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)
)
SELECT dates.date, COALESCE(SUM(price), 0) AS sum_price
FROM dates LEFT JOIN sales ON dates.date = sales.date
GROUP BY dates.date
ORDER BY dates.date;

The output looks like this:

+------------+-----------+
| date       | sum_price |
+------------+-----------+
| 2017-01-03 |    300.00 |
| 2017-01-04 |      0.00 |
| 2017-01-05 |      0.00 |
| 2017-01-06 |     50.00 |
| 2017-01-07 |      0.00 |
| 2017-01-08 |    180.00 |
| 2017-01-09 |      0.00 |
| 2017-01-10 |      5.00 |
+------------+-----------+


Hierarchical Data Traversal:


CREATE TABLE employees (
  id         INT PRIMARY KEY NOT NULL,
  name       VARCHAR(100) NOT NULL,
  manager_id INT NULL,
  INDEX (manager_id),
FOREIGN KEY (manager_id) REFERENCES employees (id)
);
INSERT INTO employees VALUES
(333, "Yasmina", NULL),  # Yasmina is the CEO (manager_id is NULL)
(198, "John", 333),      # John has ID 198 and reports to 333 (Yasmina)
(692, "Tarek", 333),
(29, "Pedro", 198),
(4610, "Sarah", 29),
(72, "Pierre", 29),
(123, "Adil", 692);



 The resulting data set looks like this:

mysql> SELECT * FROM employees ORDER BY id;
+------+---------+------------+
| id   | name    | manager_id |
+------+---------+------------+
|   29 | Pedro   |        198 |
|   72 | Pierre  |         29 |
|  123 | Adil    |        692 |
|  198 | John    |        333 |
|  333 | Yasmina |       NULL |
|  692 | Tarek   |        333 |
| 4610 | Sarah   |         29 |
+------+---------+------------+



WITH RECURSIVE employee_paths (id, name, path) AS
(
  SELECT id, name, CAST(id AS CHAR(200))
    FROM employees
    WHERE manager_id IS NULL
  UNION ALL
  SELECT e.id, e.name, CONCAT(ep.path, ',', e.id)
    FROM employee_paths AS ep JOIN employees AS e
      ON ep.id = e.manager_id
)
SELECT * FROM employee_paths ORDER BY path;



 The CTE produces this output:

+------+---------+-----------------+
| id   | name    | path            |
+------+---------+-----------------+
|  333 | Yasmina | 333             |
|  198 | John    | 333,198         |
|   29 | Pedro   | 333,198,29      |
| 4610 | Sarah   | 333,198,29,4610 |
|   72 | Pierre  | 333,198,29,72   |
|  692 | Tarek   | 333,692         |
|  123 | Adil    | 333,692,123     |
+------+---------+-----------------+



mysql> WITH RECURSIVE ...
       ...
       SELECT * FROM employees_extended
       WHERE id IN (692, 4610)
       ORDER BY path;
+------+-------+-----------------+
| id   | name  | path            |
+------+-------+-----------------+
| 4610 | Sarah | 333,198,29,4610 |
|  692 | Tarek | 333,692         |
+------+-------+-----------------+



WITH cte AS (SELECT 1) SELECT * FROM cte;
SELECT * FROM (SELECT 1) AS dt;


---x----







